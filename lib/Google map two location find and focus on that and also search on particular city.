// ignore_for_file: avoid_print, unused_field

import 'dart:async';

import 'package:axa/config/colors.dart';
import 'package:axa/widget/custom_bottom_bar.dart';
import 'package:axa/widget/toast.dart';
import 'package:flutter/material.dart';
import 'package:geocoder2/geocoder2.dart';
import 'package:geocoding/geocoding.dart' as geo;
import 'package:get/get.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:google_place/google_place.dart';

import '../../config/textstyle.dart';
import '../../controller/map_controller.dart';
import '../../widget/custom_button.dart';

class HinAndWegVomKemScreen extends StatefulWidget {
  const HinAndWegVomKemScreen({Key? key}) : super(key: key);

  @override
  State<HinAndWegVomKemScreen> createState() => _HinAndWegVomKemScreenState();
}

class _HinAndWegVomKemScreenState extends State<HinAndWegVomKemScreen> {
  final mapController = Get.put(MpaController());
  final startMapController = TextEditingController().obs;
  final endMapController = TextEditingController().obs;
  Set<Marker> _markers = {};
  GoogleMapController? _mapController;

  Set<Polyline> _polyline = {};
  Map currentAddress = {};
  final ScrollController controller = ScrollController();
  bool shouldSwitchPhysics = false;

  LatLng? start;
  LatLng? end;
  List<LatLng> latLen = [
    // LatLng(19.0759837, 72.8776559),
    // LatLng(28.679079, 77.069710),

    const LatLng(52.520008, 13.404954),
    // const LatLng(28.679079, 77.069710),
  ];

  @override
  void initState() {
    for (var i = 0; i < latLen.length; i++) {
      _markers.add(
          // added markers
          Marker(
        markerId: MarkerId(i.toString()),
        position: latLen[i],
        infoWindow: const InfoWindow(
          title: 'HOTEL',
          snippet: '5 Star Hotel',
        ),
        icon: BitmapDescriptor.defaultMarker,
      ));
      _polyline.add(
        Polyline(
          polylineId: PolylineId('$i'),
          points: latLen,
          color: AppColors.primaryColor,
        ),
      );
    }

    controller.addListener(() {
      if (controller.offset == controller.position.maxScrollExtent) {
        // If the scroll offset reaches the maximum extent, switch to NeverScrollableScrollPhysics
        if (!shouldSwitchPhysics) {
          setState(() {
            shouldSwitchPhysics = true;
          });
        }
      } else {
        // if (controller.offset == controller.position.minScrollExtent)
        // If the scroll offset is not at the maximum extent, switch back to BouncingScrollPhysics
        if (shouldSwitchPhysics) {
          setState(() {
            shouldSwitchPhysics = false;
          });
        }
      }
    });
    // getUserLocation();
    super.initState();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  final Completer<GoogleMapController> _controller = Completer<GoogleMapController>();

  // static const CameraPosition _kGooglePlex = CameraPosition(
  //   target: LatLng(37.42796133580664, -122.085749655962),
  //   zoom: 14.4746,
  // );

  CameraPosition _kLake = const CameraPosition(target: LatLng(52.531677, 13.381777), zoom: 7.0);

  // bool isLocation = false;
  List<AutocompletePrediction> autoComplete = [];
  double lat = 52.531677;
  double lon = 13.381777;

  // double lat = 88.3639;
  // double lon = 22.5726;

  var googlePlace = GooglePlace("AIzaSyAhLKFVsJxIiFGZ4bRhLtNGGsnfqDZBHdg");

  autoCompleteSearch(String value) async {
    print("value is $value");
    // Future.delayed(Duration.zero, () {});

    var result =
        await googlePlace.autocomplete.get(value, location: LatLon(lat, lon), origin: LatLon(lat, lon), components: [
      Component("country", "DE"),
      // Component('locality"', 'Berlin'),
    ]
            // components: [Component("country", "DE")]
            );

    //  final query = await Geocoder.local.findAddressesFromQuery(value);
    debugPrint("---result----$result");
    debugPrint("---result----${result!.status}");
    debugPrint("---result----${result.predictions}");
    if (result.predictions != null && result.predictions!.isNotEmpty) {
      autoComplete.clear();
      print("--result12---$result");
      // autoComplete = result.predictions!;
      for (var prediction in result.predictions!) {
        debugPrint("search description ==== ${prediction.description!.toLowerCase()}");
        if (prediction.description!.toLowerCase().contains("berlin")) {
          autoComplete.add(prediction);
        }
      }
    }
    print("---autoComplete--$autoComplete");
    setState(() {});
  }

  void _changeCameraAngle({required LatLng target}) async {
    LatLng startLocation = start!;
    LatLng endLocation = end!;

    final southwest = LatLng(
      startLocation.latitude < endLocation.latitude ? startLocation.latitude : endLocation.latitude,
      startLocation.longitude < endLocation.longitude ? startLocation.longitude : endLocation.longitude,
    );

    final northeast = LatLng(
      startLocation.latitude > endLocation.latitude ? startLocation.latitude : endLocation.latitude,
      startLocation.longitude > endLocation.longitude ? startLocation.longitude : endLocation.longitude,
    );

    _mapController!
        .animateCamera(CameraUpdate.newLatLngBounds(LatLngBounds(northeast: northeast, southwest: southwest), 50));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      backgroundColor: AppColors.blackFontColor,
      bottomNavigationBar: customBottomBar(),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            child: NotificationListener<OverscrollIndicatorNotification>(
              // Use the shouldSwitchPhysics flag to conditionally set the physics

              onNotification: (notification) {
                notification.disallowIndicator();
                return false;
              },
              child: Padding(
                padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 28),
                child: ListView(
                  padding: EdgeInsets.zero,
                  physics: shouldSwitchPhysics == true
                      ? const NeverScrollableScrollPhysics()
                      : const BouncingScrollPhysics(),
                  //physics: NeverScrollableScrollPhysics(),
                  controller: controller,

                  shrinkWrap: true,
                  children: [
                    Obx(
                      () => InkWell(
                        // focusColor: Colors.transparent,
                        // hoverColor: Colors.transparent,
                        // highlightColor: Colors.transparent,
                        splashColor: Colors.transparent,
                        onTap: () {
                          setState(() {
                            shouldSwitchPhysics = false;
                          });
                          print("--shouldSwitchPhysics--$shouldSwitchPhysics");
                        },
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              "So kommst du zu uns oder findest die\nbeste Route vom KEB zu deinem Ziel:".tr,
                              style: AppTextStyle.regular.copyWith(
                                  color: AppColors.whiteFontColor.withOpacity(0.80),
                                  fontFamily: "Arial",
                                  fontSize: 18,
                                  wordSpacing: 1.9),
                            ),
                            const SizedBox(
                              height: 20,
                            ),
                            Text(
                              "Wo m√∂chtest du hin?".tr,
                              style: AppTextStyle.regular.copyWith(
                                  color: AppColors.whiteFontColor.withOpacity(0.80), fontSize: 15, wordSpacing: 1.9),
                            ),

                            InkWell(
                              onTap: () {
                                setState(() {
                                  shouldSwitchPhysics = false;
                                });
                              },
                              child: Theme(
                                data: Theme.of(context).copyWith(
                                    textSelectionTheme:
                                        const TextSelectionThemeData(selectionColor: Colors.transparent)),
                                child: Padding(
                                  padding: const EdgeInsets.only(bottom: 10),
                                  child: TextFormField(
                                    controller: startMapController.value,
                                    style: const TextStyle(
                                      //   overflow: TextOverflow.ellipsis,
                                      color: Colors.white,
                                      decoration: TextDecoration.none,
                                      decorationStyle: TextDecorationStyle.dotted,
                                      decorationColor: AppColors.primaryColor,
                                    ),
                                    onChanged: (val) async {
                                      print("-----------136");
                                      mapController.isMapListEnd.value = false;
                                      mapController.mapListShow.value = true;

                                      await autoCompleteSearch(val);
                                    },
                                    cursorColor: Colors.white,
                                    decoration: InputDecoration(
                                      enabledBorder: const UnderlineInputBorder(
                                        borderSide: BorderSide(color: AppColors.whiteFontColor),
                                      ),
                                      focusedBorder: const UnderlineInputBorder(
                                        borderSide: BorderSide(color: AppColors.primaryColor),
                                      ),
                                      fillColor: AppColors.primaryColor,
                                      border: const UnderlineInputBorder(
                                        borderSide: BorderSide(color: AppColors.whiteFontColor),
                                      ),

                                      suffixIcon: Obx(
                                        () => startMapController.value.text.isNotEmpty
                                            ? InkWell(
                                                onTap: (() {
                                                  startMapController.value.clear();
                                                  mapController.mapListShow.value = false;

                                                  setState(() {});
                                                  // mapListShow = true;
                                                }),
                                                child: Padding(
                                                    padding: const EdgeInsets.only(
                                                      left: 20,
                                                    ),
                                                    child: Container(
                                                        height: 10,
                                                        width: 10,
                                                        decoration: BoxDecoration(
                                                          color: AppColors.whiteFontColor.withOpacity(0.20),
                                                          shape: BoxShape.circle,
                                                        ),
                                                        child: const Icon(
                                                          Icons.close,
                                                          color: AppColors.blackFontColor,
                                                          size: 20,
                                                        ))),
                                              )
                                            : const SizedBox(),
                                      ),

                                      // brder: InputBorder.none,
                                      hintText: "Start ...",
                                      hintStyle: AppTextStyle.medium.copyWith(
                                          fontSize: 16, color: AppColors.greyDarkColor, fontWeight: FontWeight.w400),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            // serach list
                            mapController.mapListShow.value == true && startMapController.value.text.isNotEmpty
                                ? Container(
                                    color: AppColors.blackFontColor,
                                    child: Column(
                                      children: [
                                        ListView.builder(
                                          padding: EdgeInsets.zero,
                                          physics: const NeverScrollableScrollPhysics(),
                                          shrinkWrap: true,
                                          itemCount: autoComplete.length,
                                          itemBuilder: (context, i) {
                                            final add = autoComplete[i];
                                            print("Description = ${add.description}");
                                            return InkWell(
                                              onTap: () async {
                                                setState(() {
                                                  mapController.mapListShow.value = false;
                                                });

                                                print("--------maplistshow----${mapController.mapListShow.value}");
                                                try {
                                                  debugPrint("In TRy block==============");
                                                  if (add.description != null) {
                                                    final lst = await geo.locationFromAddress(add.description!);
                                                    debugPrint("Lsyt==============$lst");
                                                    debugPrint("Lsyt==============${lst.first.latitude}");
                                                    debugPrint("Lsyt==============${lst.first.longitude}");
                                                    start = LatLng(lst.first.latitude, lst.first.longitude);

                                                    debugPrint("First Lan Long==============$start");
                                                    if (lst.isNotEmpty) {
                                                      debugPrint(
                                                          'https://maps.googleapis.com/maps/api/geocode/json?latlng=21.2719929,72.95865359999999&key=AIzaSyAhLKFVsJxIiFGZ4bRhLtNGGsnfqDZBHdg');
                                                      debugPrint("Print=================LST");
                                                      var addresses = await Geocoder2.getDataFromCoordinates(
                                                        latitude: lst.first.latitude,
                                                        longitude: lst.first.longitude,
                                                        googleMapApiKey: "AIzaSyAhLKFVsJxIiFGZ4bRhLtNGGsnfqDZBHdg",
                                                      );

                                                      print("map == $addresses");
                                                      print("--controller-----${startMapController.value.text}");
                                                      startMapController.value.text = addresses.address;
                                                      debugPrint(
                                                          "City=====startMapController.value.text====================${startMapController.value.text}");
                                                      // if (_dashboardController.selectedLocation.isNotEmpty) {
                                                      //   // getAllVehicleController.isLatLong.value=false;
                                                      //   // Future.microtask(() =>
                                                      //   //     getAllVehicleController.getAllVehicles(
                                                      //   //       lat: _dashboardController
                                                      //   //           .selectedLocation["lat"],
                                                      //   //       long: _dashboardController
                                                      //   //           .selectedLocation["lng"],
                                                      //   //     ));
                                                      // }
                                                      // print("widget.isMap ${widget.isMap}");
                                                      // Get.to(() => VehicleDateTimeScreen(
                                                      //       isMap: widget.isMap,
                                                      //     ));
                                                    }
                                                  }
                                                  for (var i = 0; i < latLen.length; i++) {
                                                    _markers.add(
                                                        // added markers
                                                        Marker(
                                                      markerId: MarkerId(i.toString()),
                                                      position: latLen[i],
                                                      infoWindow: const InfoWindow(
                                                        title: 'HOTEL',
                                                        snippet: '5 Star Hotel',
                                                      ),
                                                      icon: BitmapDescriptor.defaultMarker,
                                                    ));
                                                    _polyline.add(
                                                      Polyline(
                                                        polylineId: PolylineId('$i'),
                                                        points: latLen,
                                                        color: AppColors.primaryColor,
                                                      ),
                                                    );
                                                  }
                                                } catch (e) {
                                                  print("Error/??/??------$e");
                                                } finally {
                                                  print("------------gcdgg");
                                                }
                                              },
                                              child: Column(
                                                children: [
                                                  locationData(
                                                      add.description.toString().split(",").first,
                                                      add.description
                                                          .toString()
                                                          .split(",")
                                                          .sublist(1)
                                                          .join(",")
                                                          .trim()),
                                                  Padding(
                                                    padding:
                                                        const EdgeInsets.only(left: 15, right: 15, top: 7, bottom: 7),
                                                    child: Container(
                                                      height: 1,
                                                      // width: 400,
                                                      color: Colors.white,
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            );
                                          },
                                        )
                                      ],
                                    ),
                                  )
                                : const SizedBox(),

                            /// ****** end ***********
                            InkWell(
                              onTap: () {
                                setState(() {
                                  shouldSwitchPhysics = false;
                                });
                              },
                              child: Theme(
                                data: Theme.of(context).copyWith(
                                    textSelectionTheme:
                                        const TextSelectionThemeData(selectionColor: Colors.transparent)),
                                child: TextFormField(
                                  enableInteractiveSelection: false,
                                  controller: endMapController.value,
                                  style: const TextStyle(
                                    color: Colors.white,
                                    // decoration: TextDecoration.none,
                                    // decorationStyle: TextDecorationStyle.dotted,
                                    // decorationColor: AppColors.primaryColor,
                                  ),
                                  onChanged: (val) {
                                    autoCompleteSearch(val);
                                    mapController.isMapListEnd.value = true;
                                    mapController.mapListShow.value = false;

                                    setState(() {});
                                  },
                                  cursorColor: Colors.white,
                                  decoration: InputDecoration(
                                    suffixIcon: endMapController.value.text.isEmpty
                                        ? Padding(
                                            padding: const EdgeInsets.all(10.0),
                                            child: SizedBox(
                                              height: 10,
                                              width: 10,
                                              child: Image.asset(
                                                "assets/images/download_icon.png",

                                                // height: 5,
                                              ),
                                            ),
                                          )
                                        : InkWell(
                                            onTap: (() {
                                              endMapController.value.clear();
                                              mapController.isMapListEnd.value = false;

                                              setState(() {});
                                            }),
                                            child: Padding(
                                                padding: const EdgeInsets.only(
                                                  left: 20,
                                                ),
                                                child: Container(
                                                    height: 10,
                                                    width: 10,
                                                    decoration: BoxDecoration(
                                                      color: AppColors.whiteFontColor.withOpacity(0.20),
                                                      shape: BoxShape.circle,
                                                    ),
                                                    child: const Icon(
                                                      Icons.close,
                                                      color: AppColors.blackFontColor,
                                                      size: 20,
                                                    ))),
                                          ),
                                    enabledBorder: const UnderlineInputBorder(
                                      borderSide: BorderSide(color: AppColors.whiteFontColor),
                                    ),
                                    focusedBorder: const UnderlineInputBorder(
                                      borderSide: BorderSide(color: AppColors.primaryColor),
                                    ),
                                    fillColor: AppColors.primaryColor,
                                    border: const UnderlineInputBorder(
                                      borderSide: BorderSide(color: AppColors.whiteFontColor),
                                    ),
                                    // brder: InputBorder.none,
                                    hintText: "Ziel ...",
                                    hintStyle: AppTextStyle.medium.copyWith(
                                      fontSize: 16,
                                      color: AppColors.greyDarkColor,
                                      fontWeight: FontWeight.w400,
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            mapController.isMapListEnd.value == true && endMapController.value.text.isNotEmpty
                                ? Container(
                                    color: AppColors.blackFontColor,
                                    child: Column(
                                      children: [
                                        ListView.builder(
                                          padding: EdgeInsets.zero,
                                          physics: const NeverScrollableScrollPhysics(),
                                          shrinkWrap: true,
                                          itemCount: autoComplete.length,
                                          itemBuilder: (context, i) {
                                            final add = autoComplete[i];
                                            print("Description = ${add.description}");
                                            return InkWell(
                                              onTap: () async {
                                                print("----------bhbfjbv");
                                                setState(() {
                                                  mapController.isMapListEnd.value = false;
                                                });
                                                try {
                                                  debugPrint("In TRy block==============");
                                                  if (add.description != null) {
                                                    final lst = await geo.locationFromAddress(add.description!);
                                                    debugPrint("Lsyt==============$lst");
                                                    debugPrint("Lsyt==============${lst.first.latitude}");
                                                    debugPrint("Lsyt==============${lst.first.longitude}");
                                                    end = LatLng(lst.first.latitude, lst.first.longitude);
                                                    debugPrint("Second Lan Long==============$end");
                                                    if (lst.isNotEmpty) {
                                                      debugPrint(
                                                          'https://maps.googleapis.com/maps/api/geocode/json?latlng=21.2719929,72.95865359999999&key=AIzaSyAhLKFVsJxIiFGZ4bRhLtNGGsnfqDZBHdg');
                                                      debugPrint("Print=================LST");
                                                      var addresses = await Geocoder2.getDataFromCoordinates(
                                                        latitude: lst.first.latitude,
                                                        longitude: lst.first.longitude,
                                                        googleMapApiKey: "AIzaSyAhLKFVsJxIiFGZ4bRhLtNGGsnfqDZBHdg",
                                                      );
                                                      print("map == $addresses");
                                                      print("--controller-----${addresses.address}");
                                                      endMapController.value.text = addresses.address;
                                                      debugPrint(
                                                          "City=========================${endMapController.value.text}");

                                                      // if (_dashboardController.selectedLocation.isNotEmpty) {
                                                      //   // getAllVehicleController.isLatLong.value=false;
                                                      //   // Future.microtask(() =>
                                                      //   //     getAllVehicleController.getAllVehicles(
                                                      //   //       lat: _dashboardController
                                                      //   //           .selectedLocation["lat"],
                                                      //   //       long: _dashboardController
                                                      //   //           .selectedLocation["lng"],
                                                      //   //     ));
                                                      // }
                                                      // print("widget.isMap ${widget.isMap}");
                                                      // Get.to(() => VehicleDateTimeScreen(
                                                      //       isMap: widget.isMap,
                                                      //     ));
                                                    }
                                                  }
                                                  for (var i = 0; i < latLen.length; i++) {
                                                    _markers.add(
                                                        // added markers
                                                        Marker(
                                                      markerId: MarkerId(i.toString()),
                                                      position: latLen[i],
                                                      infoWindow: const InfoWindow(
                                                        title: 'HOTEL',
                                                        snippet: '5 Star Hotel',
                                                      ),
                                                      icon: BitmapDescriptor.defaultMarker,
                                                    ));
                                                    _polyline.add(
                                                      Polyline(
                                                        polylineId: PolylineId('$i'),
                                                        points: latLen,
                                                        color: AppColors.primaryColor,
                                                      ),
                                                    );
                                                  }
                                                } catch (e) {
                                                  print("Error/??/??------$e");
                                                } finally {
                                                  print("------------gcdgg");
                                                }
                                              },
                                              child: Column(
                                                children: [
                                                  locationData(
                                                      add.description.toString().split(",").first,
                                                      add.description
                                                          .toString()
                                                          .split(",")
                                                          .sublist(1)
                                                          .join(",")
                                                          .trim()),
                                                  Padding(
                                                    padding:
                                                        const EdgeInsets.only(left: 15, right: 15, top: 7, bottom: 7),
                                                    child: Container(
                                                      height: 1,
                                                      // width: 400,
                                                      color: Colors.white,
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            );
                                          },
                                        )
                                      ],
                                    ),
                                  )
                                : const SizedBox(),

                            const SizedBox(
                              height: 50,
                            ),
                            InkWell(
                              onTap: () {
                                setState(() {
                                  shouldSwitchPhysics = false;
                                });
                              },
                              child: Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 20),
                                child: customButton(
                                  clr: AppColors.primaryColor,
                                  fontSize: 18,
                                  onTap: () async {
                                    if (endMapController.value.text.isNotEmpty &&
                                        startMapController.value.text.isNotEmpty) {
                                      _markers = {};
                                      _polyline = {};
                                      latLen.clear();
                                      print("-start------locationList--$start");
                                      print("--End-----locationList--$end");

                                      _markers.add(
                                          // added markers
                                          Marker(
                                        markerId: const MarkerId("0"),
                                        position: start!,
                                        infoWindow: const InfoWindow(
                                          title: 'HOTEL',
                                          snippet: '5 Star Hotel',
                                        ),
                                        icon: BitmapDescriptor.defaultMarker,
                                      ));
                                      _markers.add(
                                          // added markers
                                          Marker(
                                        markerId: const MarkerId("1"),
                                        position: end!,
                                        infoWindow: const InfoWindow(
                                          title: 'HOTEL',
                                          snippet: '5 Star Hotel',
                                        ),
                                        icon: BitmapDescriptor.defaultMarker,
                                      ));
                                      _polyline.add(
                                        Polyline(
                                          polylineId: const PolylineId('0'),
                                          points: [start!, end!],
                                          color: AppColors.primaryColor,
                                        ),
                                      );

                                      LatLng place1 = start!;
                                      LatLng place2 = end!;

                                      // Calculate the midpoint between the two places
                                      double midLat = (place1.latitude + place2.latitude) / 2;
                                      double midLng = (place1.longitude + place2.longitude) / 2;
                                      _changeCameraAngle(target: LatLng(midLat, midLng));
                                      setState(() {});

                                      print("----pluline---$_polyline");
                                      print("----marker---$_markers");
                                      //  locationList.clear();
                                    } else {
                                      flutterToast("Bitte f√ºllen Sie die Pflichtfelder aus".tr,
                                          backgroundColor: AppColors.primaryColor);
                                    }
                                  },
                                  text: "Suchen".tr,
                                ),
                              ),
                            ),
                            const SizedBox(
                              height: 50,
                            ),
                          ],
                        ),
                      ),
                    ),
                    Container(
                      height: Get.height / 3,
                      width: Get.width,
                      color: AppColors.greyDarkColor,
                      child: GoogleMap(
                        zoomGesturesEnabled: true,
                        scrollGesturesEnabled: true,
                        polylines: _polyline,
                        mapType: MapType.normal,
                        markers: _markers,
                        initialCameraPosition: _kLake,
                        onMapCreated: (GoogleMapController controller) {
                          // _controller.complete(controller);
                          _mapController = controller;
                          // setPolyline();
                          // controller.animateCamera(CameraUpdate.newLatLngBounds(LatLngBounds(northeast: start!, southwest: end!), 50));
                          debugPrint("getZoomLevel ======= ${controller.getZoomLevel()}");
                        },
                      ),
                    )
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  locationData(String text1, String text2) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        const Padding(
          padding: EdgeInsets.only(left: 25, right: 20, bottom: 20, top: 25),
          child: Center(
            child: Icon(
              Icons.location_on,
              size: 20,
              color: AppColors.whiteFontColor,
            ),
            // child: SvgPicture.asset("assets/icons/location_icon.svg",
            //     height: 24, width: 16, color: AppColors.darkIconColor),
            // Image.asset("assets/icons/location_icon.svg",
            //     height: 40, width: 30, color: AppColors.darkIconColor),
          ),
        ),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(
                width: Get.size.width / 100 * 82,
                child: Text(
                  text1,
                  overflow: TextOverflow.ellipsis,
                  style: AppTextStyle.bold.copyWith(
                    color: Colors.white,
                    fontSize: 18,
                  ),
                ),
              ),
              const SizedBox(
                height: 2,
              ),
              SizedBox(
                width: Get.size.width / 100 * 82,
                child: Text(
                  text2,
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                  style: AppTextStyle.bold.copyWith(
                    color: Colors.white,
                    fontSize: 14,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
